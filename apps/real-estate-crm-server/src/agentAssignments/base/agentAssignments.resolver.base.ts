/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AgentAssignments } from "./AgentAssignments";
import { AgentAssignmentsCountArgs } from "./AgentAssignmentsCountArgs";
import { AgentAssignmentsFindManyArgs } from "./AgentAssignmentsFindManyArgs";
import { AgentAssignmentsFindUniqueArgs } from "./AgentAssignmentsFindUniqueArgs";
import { CreateAgentAssignmentsArgs } from "./CreateAgentAssignmentsArgs";
import { UpdateAgentAssignmentsArgs } from "./UpdateAgentAssignmentsArgs";
import { DeleteAgentAssignmentsArgs } from "./DeleteAgentAssignmentsArgs";
import { Properties } from "../../properties/base/Properties";
import { AgentAssignmentsService } from "../agentAssignments.service";
@graphql.Resolver(() => AgentAssignments)
export class AgentAssignmentsResolverBase {
  constructor(protected readonly service: AgentAssignmentsService) {}

  async _agentAssignmentsItemsMeta(
    @graphql.Args() args: AgentAssignmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AgentAssignments])
  async agentAssignmentsItems(
    @graphql.Args() args: AgentAssignmentsFindManyArgs
  ): Promise<AgentAssignments[]> {
    return this.service.agentAssignmentsItems(args);
  }

  @graphql.Query(() => AgentAssignments, { nullable: true })
  async agentAssignments(
    @graphql.Args() args: AgentAssignmentsFindUniqueArgs
  ): Promise<AgentAssignments | null> {
    const result = await this.service.agentAssignments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AgentAssignments)
  async createAgentAssignments(
    @graphql.Args() args: CreateAgentAssignmentsArgs
  ): Promise<AgentAssignments> {
    return await this.service.createAgentAssignments({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AgentAssignments)
  async updateAgentAssignments(
    @graphql.Args() args: UpdateAgentAssignmentsArgs
  ): Promise<AgentAssignments | null> {
    try {
      return await this.service.updateAgentAssignments({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgentAssignments)
  async deleteAgentAssignments(
    @graphql.Args() args: DeleteAgentAssignmentsArgs
  ): Promise<AgentAssignments | null> {
    try {
      return await this.service.deleteAgentAssignments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Properties, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: AgentAssignments
  ): Promise<Properties | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
