/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Properties as PrismaProperties,
  AgentAssignments as PrismaAgentAssignments,
} from "@prisma/client";

export class PropertiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PropertiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.properties.count(args);
  }

  async propertiesItems(
    args: Prisma.PropertiesFindManyArgs
  ): Promise<PrismaProperties[]> {
    return this.prisma.properties.findMany(args);
  }
  async properties(
    args: Prisma.PropertiesFindUniqueArgs
  ): Promise<PrismaProperties | null> {
    return this.prisma.properties.findUnique(args);
  }
  async createProperties(
    args: Prisma.PropertiesCreateArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.create(args);
  }
  async updateProperties(
    args: Prisma.PropertiesUpdateArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.update(args);
  }
  async deleteProperties(
    args: Prisma.PropertiesDeleteArgs
  ): Promise<PrismaProperties> {
    return this.prisma.properties.delete(args);
  }

  async findAgentAssignmentsItems(
    parentId: string,
    args: Prisma.AgentAssignmentsFindManyArgs
  ): Promise<PrismaAgentAssignments[]> {
    return this.prisma.properties
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .agentAssignmentsItems(args);
  }
}
